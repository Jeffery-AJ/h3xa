from django.db import models
from core.models import Company, Transaction, Account
from django.contrib.auth.models import User
import uuid
from decimal import Decimal


class FraudDetectionRule(models.Model):
    """AI-powered fraud detection rules"""
    RULE_TYPES = [
        ('VELOCITY', 'Transaction Velocity'),
        ('AMOUNT_ANOMALY', 'Amount Anomaly'),
        ('AMOUNT_THRESHOLD', 'Amount Threshold'),
        ('LOCATION_ANOMALY', 'Location Anomaly'),
        ('PATTERN_ANOMALY', 'Pattern Anomaly'),
        ('TIME_ANOMALY', 'Time Anomaly'),
        ('MERCHANT_RISK', 'Merchant Risk'),
        ('BEHAVIORAL', 'Behavioral Analysis'),
        ('ML_MODEL', 'Machine Learning Model'),
    ]
    
    SEVERITY_LEVELS = [
        ('LOW', 'Low Risk'),
        ('MEDIUM', 'Medium Risk'),
        ('HIGH', 'High Risk'),
        ('CRITICAL', 'Critical Risk'),
    ]
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='fraud_rules')
    name = models.CharField(max_length=100)
    rule_type = models.CharField(max_length=20, choices=RULE_TYPES)
    severity = models.CharField(max_length=10, choices=SEVERITY_LEVELS)
    
    # Rule configuration
    parameters = models.JSONField(default=dict, help_text="Rule-specific parameters")
    thresholds = models.JSONField(default=dict, help_text="Alert thresholds")
    
    is_active = models.BooleanField(default=True)
    auto_block = models.BooleanField(default=False, help_text="Automatically block flagged transactions")
    
    # ML model info
    model_version = models.CharField(max_length=50, null=True, blank=True)
    model_accuracy = models.DecimalField(max_digits=5, decimal_places=4, null=True, blank=True)
    last_trained = models.DateTimeField(null=True, blank=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
        unique_together = ['company', 'name']
    
    def __str__(self):
        return f"{self.name} - {self.rule_type}"


class FraudAlert(models.Model):
    """Fraud alerts generated by detection rules"""
    STATUS_CHOICES = [
        ('OPEN', 'Open'),
        ('INVESTIGATING', 'Under Investigation'),
        ('RESOLVED_FRAUD', 'Confirmed Fraud'),
        ('RESOLVED_LEGITIMATE', 'Legitimate Transaction'),
        ('FALSE_POSITIVE', 'False Positive'),
        ('DISMISSED', 'Dismissed'),
    ]
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='fraud_alerts')
    transaction = models.ForeignKey(Transaction, on_delete=models.CASCADE, related_name='fraud_alerts')
    rule = models.ForeignKey(FraudDetectionRule, on_delete=models.CASCADE, related_name='alerts')
    
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='OPEN')
    risk_score = models.DecimalField(max_digits=5, decimal_places=2, help_text="Risk score 0-100")
    confidence_score = models.DecimalField(max_digits=5, decimal_places=2, help_text="AI confidence 0-100")
    
    # Alert details
    alert_reason = models.TextField()
    anomaly_factors = models.JSONField(default=list, help_text="Factors that triggered the alert")
    risk_indicators = models.JSONField(default=dict, help_text="Specific risk indicators")
    
    # Investigation
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    investigated_at = models.DateTimeField(null=True, blank=True)
    resolution_notes = models.TextField(null=True, blank=True)
    
    # Actions taken
    transaction_blocked = models.BooleanField(default=False)
    customer_notified = models.BooleanField(default=False)
    escalated = models.BooleanField(default=False)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    resolved_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['company', 'status', 'created_at']),
            models.Index(fields=['risk_score', 'created_at']),
            models.Index(fields=['transaction', 'created_at']),
        ]
    
    def __str__(self):
        return f"Fraud Alert: {self.transaction} - {self.risk_score}%"


class BehavioralProfile(models.Model):
    """AI-generated behavioral profiles for fraud detection"""
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='behavioral_profiles')
    account = models.ForeignKey(Account, on_delete=models.CASCADE, related_name='behavioral_profile')
    
    # Transaction patterns
    avg_transaction_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    std_transaction_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    typical_transaction_times = models.JSONField(default=list)  # Hours of day
    typical_transaction_days = models.JSONField(default=list)   # Days of week
    
    # Merchant patterns
    frequent_merchants = models.JSONField(default=list)
    typical_categories = models.JSONField(default=list)
    geographical_patterns = models.JSONField(default=dict)
    
    # Velocity patterns
    max_daily_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    max_daily_count = models.IntegerField(default=0)
    avg_time_between_transactions = models.DurationField(null=True, blank=True)
    
    # Risk factors
    risk_indicators = models.JSONField(default=dict)
    anomaly_threshold = models.DecimalField(max_digits=5, decimal_places=2, default=75.0)
    
    last_updated = models.DateTimeField(auto_now=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['company', 'account']
        ordering = ['-last_updated']
    
    def __str__(self):
        return f"Behavioral Profile: {self.account}"


class MLModel(models.Model):
    """Machine learning models for fraud detection"""
    MODEL_TYPES = [
        ('ANOMALY_DETECTION', 'Anomaly Detection'),
        ('CLASSIFICATION', 'Fraud Classification'),
        ('RISK_SCORING', 'Risk Scoring'),
        ('CLUSTERING', 'Transaction Clustering'),
        ('NEURAL_NETWORK', 'Neural Network'),
        ('ENSEMBLE', 'Ensemble Model'),
    ]
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=100)
    model_type = models.CharField(max_length=20, choices=MODEL_TYPES)
    version = models.CharField(max_length=50)
    
    # Model metadata
    algorithm = models.CharField(max_length=50)
    features = models.JSONField(default=list, help_text="List of features used")
    hyperparameters = models.JSONField(default=dict)
    
    # Performance metrics
    accuracy = models.DecimalField(max_digits=5, decimal_places=4, null=True, blank=True)
    precision = models.DecimalField(max_digits=5, decimal_places=4, null=True, blank=True)
    recall = models.DecimalField(max_digits=5, decimal_places=4, null=True, blank=True)
    f1_score = models.DecimalField(max_digits=5, decimal_places=4, null=True, blank=True)
    auc_score = models.DecimalField(max_digits=5, decimal_places=4, null=True, blank=True)
    
    # Training data
    training_data_size = models.IntegerField(null=True, blank=True)
    training_period_start = models.DateTimeField(null=True, blank=True)
    training_period_end = models.DateTimeField(null=True, blank=True)
    
    # Model file info
    model_file_path = models.CharField(max_length=500, null=True, blank=True)
    model_file_size = models.BigIntegerField(null=True, blank=True)
    
    is_active = models.BooleanField(default=False)
    is_production = models.BooleanField(default=False)
    
    trained_at = models.DateTimeField(auto_now_add=True)
    deployed_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-trained_at']
        unique_together = ['name', 'version']
    
    def __str__(self):
        return f"{self.name} v{self.version} - {self.model_type}"


class FraudInvestigation(models.Model):
    """Fraud investigation cases"""
    INVESTIGATION_STATUS = [
        ('OPEN', 'Open'),
        ('IN_PROGRESS', 'In Progress'),
        ('PENDING_INFO', 'Pending Information'),
        ('ESCALATED', 'Escalated'),
        ('CLOSED_FRAUD', 'Closed - Fraud Confirmed'),
        ('CLOSED_LEGITIMATE', 'Closed - Legitimate'),
        ('CLOSED_INCONCLUSIVE', 'Closed - Inconclusive'),
    ]
    
    PRIORITY_LEVELS = [
        ('LOW', 'Low'),
        ('MEDIUM', 'Medium'),
        ('HIGH', 'High'),
        ('URGENT', 'Urgent'),
    ]
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='fraud_investigations')
    alert = models.OneToOneField(FraudAlert, on_delete=models.CASCADE, related_name='investigation')
    
    case_number = models.CharField(max_length=50, unique=True)
    status = models.CharField(max_length=20, choices=INVESTIGATION_STATUS, default='OPEN')
    priority = models.CharField(max_length=10, choices=PRIORITY_LEVELS, default='MEDIUM')
    
    # Investigation details
    investigator = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    investigation_notes = models.TextField(null=True, blank=True)
    evidence_collected = models.JSONField(default=list)
    external_references = models.JSONField(default=list)
    
    # Timeline
    created_at = models.DateTimeField(auto_now_add=True)
    assigned_at = models.DateTimeField(null=True, blank=True)
    first_response_at = models.DateTimeField(null=True, blank=True)
    closed_at = models.DateTimeField(null=True, blank=True)
    
    # Resolution
    resolution_summary = models.TextField(null=True, blank=True)
    actions_taken = models.JSONField(default=list)
    lessons_learned = models.TextField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"Investigation {self.case_number} - {self.status}"


class WhitelistEntry(models.Model):
    """Whitelisted entities that bypass fraud detection"""
    ENTITY_TYPES = [
        ('MERCHANT', 'Merchant'),
        ('IP_ADDRESS', 'IP Address'),
        ('ACCOUNT', 'Account'),
        ('TRANSACTION_PATTERN', 'Transaction Pattern'),
        ('DEVICE', 'Device'),
    ]
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='whitelist_entries')
    
    entity_type = models.CharField(max_length=20, choices=ENTITY_TYPES)
    entity_value = models.CharField(max_length=255)
    entity_details = models.JSONField(default=dict)
    
    reason = models.TextField()
    added_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    
    is_active = models.BooleanField(default=True)
    expires_at = models.DateTimeField(null=True, blank=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
        unique_together = ['company', 'entity_type', 'entity_value']
    
    def __str__(self):
        return f"Whitelist: {self.entity_type} - {self.entity_value}"


class FraudMetrics(models.Model):
    """Daily fraud detection metrics"""
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='fraud_metrics')
    date = models.DateField()
    
    # Detection metrics
    total_transactions = models.IntegerField(default=0)
    flagged_transactions = models.IntegerField(default=0)
    confirmed_fraud = models.IntegerField(default=0)
    false_positives = models.IntegerField(default=0)
    
    # Risk metrics
    avg_risk_score = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    high_risk_count = models.IntegerField(default=0)
    blocked_transactions = models.IntegerField(default=0)
    
    # Financial impact
    fraud_amount_detected = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    fraud_amount_prevented = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    false_positive_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0)
    
    # Model performance
    model_accuracy = models.DecimalField(max_digits=5, decimal_places=4, null=True, blank=True)
    detection_rate = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    false_positive_rate = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-date']
        unique_together = ['company', 'date']
    
    def __str__(self):
        return f"Fraud Metrics: {self.company} - {self.date}"
